/* Best and Easiest way to solve this Problem */

int main()
{
    int n, m;
    cin >> n >> m;
    int arr1[n], arr2[m];
    for (int i = 0; i < n; i++)
        cin >> arr1[i];

    for (int i = 0; i < m; i++)
        cin >> arr2[i];

    int i=n-1;
    int j=0;
    while(i>=0 and j<m)
    {
        if (arr[i]>arr[j])
        {
            swap(arr[i], arr[j]);
            i--;
            j++;
        }
    }
    sort(arr1,arr+n);
    sort(arr2,arr2+m);
}

Extra Space Complexity - O(1);
Time Complexity ~ nlog(n) + mlog(m);

..........................................................................
Another method using Binary Search

void merge(int arr1[], int n, int arr2[], int m)
{
    int i = 0, j = 0;
    while (i < n && j < m)
    {
        if (arr1[i] > arr2[j])
        {
            int z = arr1[i];
            auto ind = lower_bound(arr2, arr2 + m, arr1[i]) - arr2;
            arr1[i] = arr2[j];
            for (int k = j; k < ind - 1; k++)
                swap(arr2[k], arr2[k + 1]);
            if (ind != 0)
                arr2[ind - 1] = z;
        }
        i++;
    }
}

Extra Space Complexity - O(1);
Time Complexity - n*mlog(m);
