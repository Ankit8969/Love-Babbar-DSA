/* For Solving the problem we use the concept "Finding the maximum size rectange in Histogram"  */

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        int left[n], right[n];
        memset(left, -1,sizeof(left));
        memset(right, -1,sizeof(right));
        
        stack <int> stk;
        for (int i=n-1;i>=0;i--)
        {
            while(stk.size()>0 && heights[stk.top()] >= heights[i])
            {
                stk.pop();
            }
            if (stk.size() == 0)
            {
                stk.push(i);
                right[i] = -1;
            }
            else
            {
                right[i] = stk.top();
                stk.push(i);
            }
        }
        while(stk.size()>0)
            stk.pop();
        
        // first take left
        for (int i=0;i<n;i++)
        {
            while(stk.size()>0 && heights[stk.top()] >= heights[i])
            {
                stk.pop();
            }
            if (stk.size() == 0)
            {
                stk.push(i);
                left[i] = -1;
            }
            else
            {
                left[i] = stk.top();
                stk.push(i);
            }
        }
        
        int ans = 0;
        for (int i=0;i<n;i++)
        {
            int t1, t2;
            t1 = (left[i] == -1)?-1:left[i];
            t2 = (right[i] == -1)?n:right[i];
            
            ans = max(ans, heights[i]*(t2 - t1 - 1));
        }
        
        return ans;
        
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<int> v(m, 0);
        int ans = 0;
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<m;j++)
            {
                if (matrix[i][j] == '0')
                    v[j] = 0 ;
                else
                    v[j] ++;
            }
            ans = max(ans, largestRectangleArea(v));
        }
        return ans;
    }
};
